
# import pandas as pd
# import plotly.graph_objects as go
# import streamlit as st

# def generate_sentiments(df, sentiments, color_mapping):
#     # convert 'date' column to datetime
#     df['date'] = pd.to_datetime(df['date'])
    
#     time_type = st.selectbox("Select Interval", ('Month', 'Year'))
#     if time_type == 'Month':
#         df['interval'] = df['date'].dt.to_period('M')
#     else:
#         df['interval'] = df['date'].dt.to_period('Y')
    
#     # create a sorted list of unique intervals
#     unique_intervals = sorted(df['interval'].unique().astype(str))

#     # Initialize the start and end intervals
#     default_end_interval = unique_intervals[-1]
#     default_start_interval_index = max(0, len(unique_intervals)-6) # Ensure that the index doesn't go below 0
#     default_start_interval = unique_intervals[default_start_interval_index]

#     # let the user select the start interval and end interval side by side
#     col1, col2 = st.columns(2)
#     with col1:
#         start_interval = st.selectbox(f"Select Starting {time_type}", unique_intervals, index=default_start_interval_index)
#     with col2:
#         start_index = unique_intervals.index(start_interval)
#         end_interval = st.selectbox(f"Select Ending {time_type}", unique_intervals[start_index:], index=len(unique_intervals[start_index:])-1)

#     # convert selected intervals back to period for comparison
#     start_interval = pd.Period(start_interval, time_type[0])
#     end_interval = pd.Period(end_interval, time_type[0])

#     # filter the DataFrame based on the user's selection
#     df = df[(df['interval'] >= start_interval) & (df['interval'] <= end_interval)]

#     # group by 'interval' and calculate the mean of each sentiment
#     grouped_df = df.groupby('interval')[sentiments].mean().reset_index()

#     # convert 'interval' back to string for plotting
#     grouped_df['interval'] = grouped_df['interval'].astype(str)

#     # create plot
#     fig = go.Figure()

#     for sentiment in sentiments:
#         fig.add_trace(
#             go.Bar(
#                 x=grouped_df['interval'],
#                 y=grouped_df[sentiment],
#                 name=sentiment,
#                 marker_color=color_mapping[sentiment],
#             )
#         )

#     layout = go.Layout(
#         title=f'Sentiments by {time_type}',
#         xaxis=dict(title=time_type),
#         yaxis=dict(title="Valeur Moyenne"),
#         autosize=True,
#         bargap=0.6,
#         margin=dict(t=20)
#     )

#     fig.update_layout(layout)
#     # st.plotly_chart(fig)
#     col1, col2 = st.columns(2)
#     with col1:
#         st.plotly_chart(fig)
#     with col2:
#         for sentiment in sentiments:
#             delta = grouped_df[sentiment].diff().mean()
#             st.metric(label=f"Average change in {sentiment}", value=f"{delta:.2f}")





import pandas as pd
import plotly.graph_objects as go
import streamlit as st

def generate_sentiments_per_year(df):
    # convert 'date' column to datetime
    df['date'] = pd.to_datetime(df['date'])

    # create 'year' column
    df['year'] = df['date'].dt.to_period('Y')

    # create a sorted list of unique years
    unique_years = sorted(df['year'].unique().astype(str))

    # Initialize the start and end years
    default_end_year = unique_years[-1]
    default_start_year_index = max(0, len(unique_years)-6) # Ensure that the index doesn't go below 0
    default_start_year = unique_years[default_start_year_index]

    # let the user select the start year and end year side by side
    col1, col2 = st.columns(2)
    with col1:
        start_year = st.selectbox("Select Starting Year", unique_years, index=default_start_year_index)
    with col2:
        start_index = unique_years.index(start_year)
        end_year = st.selectbox("Select Ending Year", unique_years[start_index:], index=len(unique_years[start_index:])-1)

    # convert selected years back to period for comparison
    start_year = pd.Period(start_year, 'Y')
    end_year = pd.Period(end_year, 'Y')

    # filter the DataFrame based on the user's selection
    df = df[(df['year'] >= start_year) & (df['year'] <= end_year)]

    # group by 'year' and calculate the mean of each sentiment
    grouped_df = df.groupby('year')[['joy', 'neutral', 'surprise', 'sadness', 'disgust', 'anger', 'fear']].mean().reset_index()

    # convert 'year' back to string for plotting
    grouped_df['year'] = grouped_df['year'].astype(str)

    # create plot
    fig = go.Figure(data=[
        go.Bar(name='Joy', x=grouped_df['year'], y=grouped_df['joy']),
        go.Bar(name='Neutral', x=grouped_df['year'], y=grouped_df['neutral']),
        go.Bar(name='Surprise', x=grouped_df['year'], y=grouped_df['surprise']),
        go.Bar(name='Sadness', x=grouped_df['year'], y=grouped_df['sadness']),
        go.Bar(name='Disgust', x=grouped_df['year'], y=grouped_df['disgust']),
        go.Bar(name='Anger', x=grouped_df['year'], y=grouped_df['anger']),
        go.Bar(name='Fear', x=grouped_df['year'], y=grouped_df['fear'])
    ])

    # Change the bar mode
    fig.update_layout(barmode='group', title_text='Sentiments by Year', xaxis_title='Year', yaxis_title='Mean Sentiment Score')

    st.plotly_chart(fig)










import pandas as pd
import plotly.graph_objects as go
import streamlit as st

def generate_sentiments_per_month(df):
    # convert 'date' column to datetime
    df['date'] = pd.to_datetime(df['date'])

    # create 'month-year' column
    df['month-year'] = df['date'].dt.to_period('M')

    # create a sorted list of unique month-year intervals
    unique_intervals = sorted(df['month-year'].unique().astype(str))

    # Initialize the start and end intervals
    default_end_interval = unique_intervals[-1]
    default_start_interval_index = max(0, len(unique_intervals)-6) # Ensure that the index doesn't go below 0
    default_start_interval = unique_intervals[default_start_interval_index]

    # let the user select the start interval and end interval side by side
    col1, col2 = st.columns(2)
    with col1:
        start_interval = st.selectbox("Select Starting Month-Year", unique_intervals, index=default_start_interval_index)
    with col2:
        start_index = unique_intervals.index(start_interval)
        end_interval = st.selectbox("Select Ending Month-Year", unique_intervals[start_index:], index=len(unique_intervals[start_index:])-1)

    # convert selected intervals back to period for comparison
    start_interval = pd.Period(start_interval, 'M')
    end_interval = pd.Period(end_interval, 'M')

    # filter the DataFrame based on the user's selection
    df = df[(df['month-year'] >= start_interval) & (df['month-year'] <= end_interval)]

    # group by 'month-year' and calculate the mean of each sentiment
    grouped_df = df.groupby('month-year')[['joy', 'neutral', 'surprise', 'sadness', 'disgust', 'anger', 'fear']].mean().reset_index()

    # convert 'month-year' back to string for plotting
    grouped_df['month-year'] = grouped_df['month-year'].astype(str)

    # create plot
    fig = go.Figure(data=[
        go.Bar(name='Joy', x=grouped_df['month-year'], y=grouped_df['joy']),
        go.Bar(name='Neutral', x=grouped_df['month-year'], y=grouped_df['neutral']),
        go.Bar(name='Surprise', x=grouped_df['month-year'], y=grouped_df['surprise']),
        go.Bar(name='Sadness', x=grouped_df['month-year'], y=grouped_df['sadness']),
        go.Bar(name='Disgust', x=grouped_df['month-year'], y=grouped_df['disgust']),
        go.Bar(name='Anger', x=grouped_df['month-year'], y=grouped_df['anger']),
        go.Bar(name='Fear', x=grouped_df['month-year'], y=grouped_df['fear'])
    ])

    # Change the bar mode
    fig.update_layout(barmode='group', title_text='Sentiments by Month', xaxis_title='Month-Year', yaxis_title='Mean Sentiment Score')

    st.plotly_chart(fig)





# import pandas as pd
# import plotly.graph_objects as go
# import streamlit as st

# def generate_sentiments_per_rating(df):
#     # convert 'date' column to datetime
#     df['date'] = pd.to_datetime(df['date'])

#     # create 'month-year' column
#     df['month-year'] = df['date'].dt.to_period('M')

#     # create a sorted list of unique month-year intervals
#     unique_intervals = sorted(df['month-year'].unique().astype(str))

#     # Initialize the start and end intervals
#     default_end_interval = unique_intervals[-1]
#     default_start_interval_index = max(0, len(unique_intervals)-6) # Ensure that the index doesn't go below 0
#     default_start_interval = unique_intervals[default_start_interval_index]

#     # let the user select the start interval
#     start_interval = st.selectbox("Select Starting Month-Year", unique_intervals, index=default_start_interval_index)

#     # Get the selected index of the start interval
#     start_index = unique_intervals.index(start_interval)

#     # let the user select the end interval
#     end_interval = st.selectbox("Select Ending Month-Year", unique_intervals[start_index:], index=len(unique_intervals[start_index:])-1)

#     # convert selected intervals back to period for comparison
#     start_interval = pd.Period(start_interval, 'M')
#     end_interval = pd.Period(end_interval, 'M')

#     # filter the DataFrame based on the user's selection
#     df = df[(df['month-year'] >= start_interval) & (df['month-year'] <= end_interval)]

#     # group by 'month-year' and calculate the mean of each sentiment
#     grouped_df = df.groupby('month-year')[['joy', 'neutral', 'surprise', 'sadness', 'disgust', 'anger', 'fear']].mean().reset_index()

#     # convert 'month-year' back to string for plotting
#     grouped_df['month-year'] = grouped_df['month-year'].astype(str)

#     # create plot
#     fig = go.Figure(data=[
#         go.Bar(name='Joy', x=grouped_df['month-year'], y=grouped_df['joy']),
#         go.Bar(name='Neutral', x=grouped_df['month-year'], y=grouped_df['neutral']),
#         go.Bar(name='Surprise', x=grouped_df['month-year'], y=grouped_df['surprise']),
#         go.Bar(name='Sadness', x=grouped_df['month-year'], y=grouped_df['sadness']),
#         go.Bar(name='Disgust', x=grouped_df['month-year'], y=grouped_df['disgust']),
#         go.Bar(name='Anger', x=grouped_df['month-year'], y=grouped_df['anger']),
#         go.Bar(name='Fear', x=grouped_df['month-year'], y=grouped_df['fear'])
#     ])

#     # Change the bar mode
#     fig.update_layout(barmode='group', title_text='Sentiments by Month', xaxis_title='Month-Year', yaxis_title='Mean Sentiment Score')

#     st.plotly_chart(fig)




# GOOD
# import pandas as pd
# import plotly.graph_objects as go
# import streamlit as st

# def generate_sentiments_per_rating(df):
#     # convert 'date' column to datetime
#     df['date'] = pd.to_datetime(df['date'])

#     # create 'month-year' column
#     df['month-year'] = df['date'].dt.to_period('M')

#     # create a sorted list of unique month-year intervals
#     unique_intervals = sorted(df['month-year'].unique().astype(str))

#     # create two columns
#     col1, col2 = st.columns(2)

#     # let the user select the start and end of the interval
#     start_interval = col1.selectbox("Select Starting Month-Year", unique_intervals)
#     end_interval = col2.selectbox("Select Ending Month-Year", unique_intervals)

#     # convert selected intervals back to period for comparison
#     start_interval = pd.Period(start_interval, 'M')
#     end_interval = pd.Period(end_interval, 'M')

#     # filter the DataFrame based on the user's selection
#     df = df[(df['month-year'] >= start_interval) & (df['month-year'] <= end_interval)]

#     # group by 'month-year' and calculate the mean of each sentiment
#     grouped_df = df.groupby('month-year')[['joy', 'neutral', 'surprise', 'sadness', 'disgust', 'anger', 'fear']].mean().reset_index()

#     # convert 'month-year' back to string for plotting
#     grouped_df['month-year'] = grouped_df['month-year'].astype(str)

#     # create plot
#     fig = go.Figure(data=[
#         go.Bar(name='Joy', x=grouped_df['month-year'], y=grouped_df['joy']),
#         go.Bar(name='Neutral', x=grouped_df['month-year'], y=grouped_df['neutral']),
#         go.Bar(name='Surprise', x=grouped_df['month-year'], y=grouped_df['surprise']),
#         go.Bar(name='Sadness', x=grouped_df['month-year'], y=grouped_df['sadness']),
#         go.Bar(name='Disgust', x=grouped_df['month-year'], y=grouped_df['disgust']),
#         go.Bar(name='Anger', x=grouped_df['month-year'], y=grouped_df['anger']),
#         go.Bar(name='Fear', x=grouped_df['month-year'], y=grouped_df['fear'])
#     ])

#     # Change the bar mode
#     fig.update_layout(barmode='group', title_text='Sentiments by Month', xaxis_title='Month-Year', yaxis_title='Mean Sentiment Score')

#     st.plotly_chart(fig)






















